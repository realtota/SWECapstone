<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Stocker Dashboard</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet">
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Jersey+25&display=swap" rel="stylesheet">
    <link href="https://fonts.googleapis.com/css2?family=Roboto:wght@400;700&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="/style.css">
</head>
<body>

   <!-- Navbar -->
   <nav class="navbar navbar-expand-lg navbar-dark gradient-navbar">
    <div class="container-fluid">
        <a class="navbar-brand" href="#">Stocker</a>
        <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav" aria-controls="navbarNav" aria-expanded="false" aria-label="Toggle navigation">
            <span class="navbar-toggler-icon"></span>
        </button>
        <div class="collapse navbar-collapse justify-content-end" id="navbarNav">
            <ul class="navbar-nav">
                <li class="nav-item">
                    <a class="nav-link" href="#">Home</a>
                </li>
                <li class="nav-item">
                    <a class="nav-link" href="/education" target="_blank">Education</a>
                </li>
            </ul>
        </div>
    </div>
</nav>
    <!-- Centered Stocker Title -->
    <h1 class="stocker-title">Stocker</h1>


    <div class="container-fluid mt-4">
        <div class="row">
            <% stockData.forEach(function(stock, index) { %>
                <% if (stock.meta) { %>
                    <div class="col-md-6 col-lg-4 mb-4">
                        <div class="card">
                            <div class="card-body">
                                <div class="d-flex justify-content-between align-items-center mb-3">
                                    <h5 class="card-title mb-0"><%= stock.meta.symbol %></h5>
                                    <select class="form-select ms-2 stock-dropdown" style="width: auto;" data-chart-index="<%= index %>">
                                        <option selected value="<%= stock.meta.symbol %>"><%= stock.meta.symbol %></option>
                                        <option value="AAPL">AAPL</option>
                                        <option value="GOOGL">GOOGL</option>
                                        <option value="MSFT">MSFT</option>
                                        <option value="AMZN">AMZN</option>
                                        <option value="META">META</option>
                                        <option value="WMT">WMT</option>
                                        <option value="COST">COST</option>
                                        <option value="ACN">ACN</option>
                                    </select>
                                </div>
                                <div class="chart-container">
                                    <canvas id="chart-<%= index %>"></canvas>
                                </div>
                                <div class="chart-container mt-3">
                                    <canvas id="volume-chart-<%= index %>"></canvas>
                                </div>
                            </div>
                        </div>
                    </div>
                <% } else { %>
                    <div class="col-md-6 col-lg-4 mb-4">
                        <div class="card">
                            <div class="card-body">
                                <h5 class="card-title">Data Unavailable</h5>
                                <p class="card-text">Unable to retrieve data for this stock.</p>
                            </div>
                        </div>
                    </div>
                <% } %>
            <% }); %>
        </div>

        <!-- Centered Start Learning Card -->
        <div class="row mt-5 justify-content-center">
          <div class="col-10 col-md-8 col-lg-6">
              <div class="card gradient-card text-white text-center">
                  <div class="card-body">
                      <h3 class="card-title">Your Gateway into Investing</h3>
                      <p class="card-text">Best Resources for starting your financial journey. Click below to find out more information.</p>
                      <a href="/education" target="_blank" class="btn btn-primary mt-3">Learn More</a>
                  </div>
              </div>
          </div>
      </div>
      
    </div>  

    <script src="https://cdn.jsdelivr.net/npm/moment@2.29.1/moment.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/chartjs-adapter-moment@1.0.0/dist/chartjs-adapter-moment.min.js"></script>

    <script>
        // JavaScript code for generating charts
        const stockData = <%- JSON.stringify(stockData) %>;
        console.log('Stock Data:', stockData);

        stockData.forEach((stock, index) => {
            if (!stock.meta) return;

            // Prepare labels for both charts
            const labels = stock.values.map(value => moment(value.datetime));
            console.log(`Labels for ${stock.meta.symbol}:`, labels);

            // Closing Prices Chart
            const ctx = document.getElementById(`chart-${index}`).getContext('2d');
            const closingPrices = stock.values.map(value => parseFloat(value.close)).reverse();

            new Chart(ctx, {
                type: 'line',
                data: {
                    labels: labels,
                    datasets: [{
                        label: 'Closing Price',
                        data: closingPrices,
                        borderColor: '#9c27b0',
                        backgroundColor: 'rgba(156, 39, 176, 0.2)',
                        pointBackgroundColor: '#03a9f4',
                        pointBorderColor: '#03a9f4',
                        fill: true,
                    }]
                },
                options: {
                    scales: {
                        x: {
                            type: 'time',
                            time: { unit: 'day' },
                            grid: { display: false }
                        },
                        y: {
                            beginAtZero: false,
                            grid: { color: 'rgba(255, 255, 255, 0.1)' }
                        }
                    },
                    plugins: {
                        legend: { display: false }
                    }
                }
            });

            // Volume Chart
            const volumeCtx = document.getElementById(`volume-chart-${index}`).getContext('2d');
            const volumeData = stock.values.map(value => parseInt(value.volume)).reverse();

            new Chart(volumeCtx, {
                type: 'bar',
                data: {
                    labels: labels,
                    datasets: [{
                        label: 'Volume',
                        data: volumeData,
                        backgroundColor: 'rgba(0, 188, 212, 0.5)',
                        borderColor: '#00bcd4',
                        borderWidth: 1,
                    }]
                },
                options: {
                    scales: {
                        x: {
                            type: 'time',
                            time: { unit: 'day' },
                            grid: { display: false }
                        },
                        y: {
                            beginAtZero: true,
                            grid: { color: 'rgba(255, 255, 255, 0.1)' }
                        }
                    },
                    plugins: {
                        legend: { display: false }
                    }
                }
            });
        });
    </script>

    <script>
        document.addEventListener('DOMContentLoaded', () => {
          document.querySelectorAll('.stock-dropdown').forEach(dropdown => {
            dropdown.addEventListener('change', async (event) => {
              const selectedSymbol = event.target.value;
              const chartIndex = event.target.getAttribute('data-chart-index');
              
              try {
                // Show loading state
                const chartCanvas = document.getElementById(`chart-${chartIndex}`);
                const volumeChartCanvas = document.getElementById(`volume-chart-${chartIndex}`);
                chartCanvas.style.opacity = '0.5';
                volumeChartCanvas.style.opacity = '0.5';
        
                // Fetch new stock data
                const response = await fetch(`/stock-data?symbol=${selectedSymbol}`);
                const stockData = await response.json();
        
                if (stockData && stockData.values) {
                  // Prepare data
                  const labels = stockData.values.map(value => moment(value.datetime));
                  const closingPrices = stockData.values.map(value => parseFloat(value.close)).reverse();
                  const volumeData = stockData.values.map(value => parseInt(value.volume)).reverse();
        
                  // Update price chart
                  const priceChart = Chart.getChart(`chart-${chartIndex}`);
                  priceChart.data.labels = labels;
                  priceChart.data.datasets[0].data = closingPrices;
                  priceChart.update();
        
                  // Update volume chart
                  const volumeChart = Chart.getChart(`volume-chart-${chartIndex}`);
                  volumeChart.data.labels = labels;
                  volumeChart.data.datasets[0].data = volumeData;
                  volumeChart.update();
        
                  // Update card title
                  const cardTitle = event.target.parentElement.querySelector('.card-title');
                  cardTitle.textContent = selectedSymbol;
                }
        
                // Restore opacity
                chartCanvas.style.opacity = '1';
                volumeChartCanvas.style.opacity = '1';
              } catch (error) {
                console.error('Error updating charts:', error);
                // Show error state
                const cardBody = event.target.closest('.card-body');
                const errorDiv = document.createElement('div');
                errorDiv.className = 'alert alert-danger mt-2';
                errorDiv.textContent = 'Failed to update chart data';
                cardBody.appendChild(errorDiv);
                setTimeout(() => errorDiv.remove(), 3000);
              }
            });
          });
        });
        </script>
    
</body>
</html>
